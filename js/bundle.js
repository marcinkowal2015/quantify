(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
$(document).ready(function () {
    var $carousel = $('.carousel__container'), $contentCarousel = $('.content__carousel'), $contentContainer = $('.content'), $header = $('.header'), $readMore = $('#read-more'), activeSlideID = 0, readMoreLinks = [], 
    // header + rest of the container need to be 100vh
    containerTargetHeight = window.innerHeight - $header.height();
    $('.content__read-more__link span').each(function () {
        //if this case if you use () => {} construction, the context will not change and so "this" will not link to current element of the jquery array.
        readMoreLinks.push(this.innerText);
    });
    if ($carousel[0]) {
        $carousel
            .height(containerTargetHeight)
            .slick({
            arrow: true,
            dots: true,
            asNavFor: $contentCarousel,
            autoplay: true,
            autoplaySpeed: 3000
        });
        $(window)
            .on('resize', function () {
            containerTargetHeight = window.innerHeight - $header.height();
            $carousel.height(containerTargetHeight);
        });
    }
    if ($contentCarousel[0]) {
        $contentCarousel
            .slick({
            arrows: false,
            asNavFor: $carousel
        });
    }
    if ($contentContainer[0]) {
        $contentContainer
            .height(containerTargetHeight);
        $(window)
            .on('resize', function () {
            containerTargetHeight = window.innerHeight - $header.height();
            $contentContainer.height(containerTargetHeight);
        });
    }
    if ($readMore[0]) {
        $readMore
            .attr('href', readMoreLinks[activeSlideID]);
        $carousel.on('afterChange', function (slick, currentSlide) {
            activeSlideID = currentSlide.currentSlide;
            $readMore
                .attr('href', readMoreLinks[activeSlideID]);
        });
    }
});
},{}],2:[function(require,module,exports){
(function (global){
/// <reference path="typings/jquery.d.ts" />
"use strict";
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
// let slideToggleAvailable: boolean = true;
var subPagesMenuVisible = false, activeSubMenu = "", mouseOver = 'mouseover ', mouseLeave = 'mouseleave', headerBarHeight = $('.header').height(), $subPagesContainer = $('.subpages_container'), subPageContainerInitialPosition = headerBarHeight - $subPagesContainer.height();
$(document).ready(function () {
    $(".header__main-menu__item")
        .toArray()
        .forEach(function (menuItem) {
        var menuContent = "#" + menuItem.id + "_content";
        if ($(menuContent)[0]) {
            $(menuItem).on(mouseOver, function () {
                if (activeSubMenu != menuContent) {
                    if (!subPagesMenuVisible) {
                        subPagesMenuVisible = true;
                        activeSubMenu = menuContent;
                        $subPagesContainer
                            .stop()
                            .animate({ top: headerBarHeight }, 200)
                            .on(mouseLeave, function () {
                            $subPagesContainer
                                .stop()
                                .animate({ top: subPageContainerInitialPosition }, 200, function () { $subPagesContainer.removeAttr('style'); })
                                .off(mouseLeave);
                            $(activeSubMenu)
                                .stop()
                                .animate({
                                opacity: 0
                            }, 200, function () {
                                $(activeSubMenu).removeAttr('style').removeClass('active');
                            });
                            activeSubMenu = '';
                            subPagesMenuVisible = false;
                        });
                        $(activeSubMenu)
                            .stop()
                            .addClass('active')
                            .animate({
                            opacity: 1
                        }, 200);
                    }
                    else {
                        $(activeSubMenu)
                            .animate({
                            opacity: 0
                        }, 100, function () {
                            $(activeSubMenu)
                                .removeAttr('style')
                                .removeClass('active');
                            $(menuContent)
                                .addClass('active')
                                .animate({
                                opacity: 1
                            }, 100);
                            activeSubMenu = menuContent;
                        });
                    }
                }
            });
        }
        else {
            $(menuItem).on(mouseOver, function () {
                $subPagesContainer
                    .stop()
                    .animate({ top: subPageContainerInitialPosition }, 200, function () { $subPagesContainer.removeAttr('style'); });
                $(activeSubMenu)
                    .animate({
                    opacity: 0
                }, 100, function () {
                    $(activeSubMenu)
                        .removeAttr('style')
                        .removeClass('active');
                });
                activeSubMenu = '';
                subPagesMenuVisible = false;
            });
        }
    });
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[2,1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
